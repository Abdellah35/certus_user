user.session.value.sql=select \n\
ut.id, \n\
ut.email_id , \n\
ut.name , \n\
ut.category , \n\
ut.force_password_change , \n\
ut.profile_completed , \n\
ut.ipv_completed, \n\
ut.photo, \n\
ut.user_type, \n\
di.verification_status \n\
from \n\
user_tbl ut \n\
left join digital_ipv di \n\
on di.user_id = ut.id \n\
where \n\
ut.email_id =:emailId ;
user.detail.value.sql=select * \n\
from \n\
user_tbl ut \n\
where \n\
ut.email_id =:emailId
user.detail.value.by.id.sql=select * \n\
from \n\
user_tbl ut \n\
where \n\
ut.id =:id
countries.sql=select country_name, country_code, country_phone_code from country_mtb
state.country.code.sql=select \n\
sm.state_name, sm.id \n\
from \n\
state_mtb sm, country_mtb cm \n\
where \n\
cm.id = sm.country_id \n\
and cm.country_code = :countryCode
state.sql=select * from state_mtb sm where id=:id;
country.code.country.sql=select * from country_mtb where country_code=:countryCode
location.by.user.id.sql=select \n\
`lt`.`id`, `lt`.`address`, `lt`.`city`, `lt`.`country_id`, `lt`.`created_by`, `lt`.`created_date`, \n\
`lt`.`modified_by`, `lt`.`modified_date`,`lt`.`pincode`,`lt`.`state_id`,`lt`.`user_id`, \n\
`cm`.`country_name`, `sm`.`state_name`, `cm`.`country_code` \n\
from \n\
`location_tbl` `lt` \n\
inner join `country_mtb` `cm` on \n\
`lt`.`country_id` = `cm`.`id` \n\
inner join `state_mtb` `sm` on \n\
`lt`.`state_id` = `sm`.`id` \n\
where \n\
`lt`.`user_id` = :userId
location.by.id.sql=select \n\
`lt`.`id`, `lt`.`address`, `lt`.`city`, `lt`.`country_id`, `lt`.`created_by`, `lt`.`created_date`, \n\
`lt`.`modified_by`, `lt`.`modified_date`,`lt`.`pincode`,`lt`.`state_id`,`lt`.`user_id`, \n\
`cm`.`country_name`, `sm`.`state_name`, `cm`.`country_code`, `lt`.`user_id` \n\
from \n\
`location_tbl` `lt` \n\
inner join `country_mtb` `cm` on \n\
`lt`.`country_id` = `cm`.`id` \n\
inner join `state_mtb` `sm` on \n\
`lt`.`state_id` = `sm`.`id` \n\
where \n\
`lt`.`id` = :locationId


get.all.clients.sql=select \n\
ucm.user_id ,\n\
ucm.company_id , \n\
ut.email_id , \n\
ut.name, \n\
ut.category, \n\
GROUP_CONCAT(distinct authority) as roles \n\
from \n\
user_tbl ut \n\
inner join user_company_mapping ucm on \n\
ut.id = ucm.user_id \n\
left join authorities au on \n\
au.username = ut.email_id \n\
group by ut.email_id 


get.requestee.notification=select \n\
nt.company_id, \n\
nt.id, \n\
nt.created_at, \n\
nt.message, \n\
nt.native_message, \n\
nt.module \n\
from \n\
certus_core_db.notification_tbl nt \n\
where \n\
nt.requestee_user_id = :userId \n\
AND nt.message_read is false


get.requestor.notification=select \n\
nt.company_id, \n\
nt.id, \n\
nt.created_at, \n\
nt.message, \n\
nt.native_message, \n\
nt.module \n\
from \n\
certus_core_db.notification_tbl nt \n\
where \n\
nt.requestor_user_id = :userId \n\
AND nt.message_read is false

get.user.list.for.client.company=select ut.id, ut.name, ut.email_id, count(nt.id) as notification_count, true as registered \n\
from \n\
kyc_db.kyc_documents kdd, \n\
certus_core_db.user_tbl ut, \n\
certus_core_db.notification_tbl nt \n\
where  \n\
kdd.requestee_userid = ut.id \n\
and nt.requestee_user_id = kdd.requestee_userid \n\
and kdd.company_id = :companyId \n\
group by id  \n\
union  \n\
select null as id, tut.name, tut.email_id, 0 as notification_count, false as registered \n\
from \n\
kyc_db.temp_kyc_documents tkd, \n\
certus_core_db.temp_user_tbl tut \n\
where \n\
tut.email_id = tkd.email_id \n\
and tkd.company_id = :companyId \n\
group by email_id


update.notification= update \n\
certus_core_db.notification_tbl nt \n\
set \n\
nt.message_read = true \n\
where nt.id = :id

update.notification.requestor= update \n\
certus_core_db.notification_tbl nt \n\
set \n\
nt.message_read = true \n\
where nt.requestor_user_id = :id


update.notification.requestee= update \n\
certus_core_db.notification_tbl nt \n\
set \n\
nt.message_read = true \n\
where nt.requestee_user_id = :id


get.requestor.notification.count.sql=select \n\
count(nt.id) \n\
from \n\
certus_core_db.notification_tbl nt \n\
where \n\
nt.requestor_user_id = :userId \n\
AND nt.message_read is false


get.requestee.notification.count.sql=select \n\
count(nt.id) \n\
from \n\
certus_core_db.notification_tbl nt \n\
where \n\
nt.requestee_user_id = :userId \n\
AND nt.message_read is false


get.alluser.session.sql=select \n\
ut.id, \n\
email_id , \n\
name , \n\
category , \n\
force_password_change , \n\
profile_completed , \n\
ipv_completed, \n\
photo, \n\
di.verification_status \n\
from \n\
user_tbl ut, \n\
digital_ipv di \n\
where \n\
ut.id = di.user_id \n\
and ut.category = :category

update.digital.ipv.approval.process.sql= update digital_ipv \n\
set verification_status = :verficationStatus \n\
where user_id = :userId

insert.comment.messagesDetails.sql= insert \n\
into \n\
certus_core_db.comment_msg_tbl(requestee_userid, requestor_userid, kyc_id, message, last_updated_timestamp, created_by) \n\
values (:requesteeUserId, :requestorUserId, :kycId, :message, :lastUpdatedTimestamp, :createdBy)

get.message.by.id.sql=SELECT ID, \n\
IF(REQUESTEE_USERID IS NOT NULL, GETNAMEBYID(REQUESTEE_USERID), GETNAMEBYID(REQUESTOR_USERID)) AS NAME, \n\
CREATED_BY AS EMAIL_ID, \n\
MESSAGE , \n\
LAST_UPDATED_TIMESTAMP \n\
FROM COMMENT_MSG_TBL CMT \n\
WHERE ID = :id


get.messages.by.kyc=SELECT \n\
CMT.ID, \n\
IF(CMT.REQUESTEE_USERID IS NOT NULL, \n\
GETNAMEBYID(CMT.REQUESTEE_USERID), \n\
GETNAMEBYID(CMT.REQUESTOR_USERID)) AS NAME, \n\
CMT.CREATED_BY AS EMAIL_ID, \n\
CMT.MESSAGE , \n\
CMT.LAST_UPDATED_TIMESTAMP \n\
FROM \n\
COMMENT_MSG_TBL CMT, \n\
KYC_DB.KYC_DOCUMENT_DETAILS_VIEW KDD \n\
WHERE \n\
KDD.ID = CMT.KYC_ID \n\
AND KDD.ID = :kycId \n\
order by CMT.last_updated_timestamp asc
get.requested.client.user.sql=SELECT * FROM \n\
(SELECT \n\
TUT.ID AS ID, \n\
FALSE AS REGISTERED, \n\
TUT.NAME , \n\
TUT.EMAIL_ID, \n\
ksdt.status as kyc_status,\n\
'Unregistered' as user_type \n\
FROM \n\
KYC_DB.TEMP_KYC_DOCUMENTS TKD, \n\
TEMP_USER_TBL TUT,\n\
kyc_db.kyc_status_details_tbl ksdt \n\
WHERE \n\
TKD.requestee_userid = TUT.ID \n\
AND TKD.COMPANY_ID = :companyId \n\
and KSDT.company_id = TKD.COMPANY_ID \n\
and KSDT.unregistered_user = 1 \n\
UNION \n\
SELECT \n\
REQUESTEE_USERID AS ID, \n\
TRUE AS REGISTERED, \n\
REQUESTEE_USERNAME AS NAME, \n\
CERTUS_CORE_DB.GETUSERNAMEBYID(REQUESTEE_USERID) AS EMAIL_ID,\n\
ksdt.status as kyc_status,\n\
KDDV.user_type as user_type \n\
FROM \n\
KYC_DB.KYC_DOCUMENT_DETAILS_VIEW KDDV,\n\
kyc_db.kyc_status_details_tbl ksdt \n\
WHERE \n\
KDDV.COMPANY_ID = :companyId \n\
and KSDT.company_id = KDDV.COMPANY_ID \n\
and KSDT.user_id = kddv.requestee_userid \n\
and KSDT.unregistered_user = 0) AS UT \n\
{0}  \n\
GROUP BY  \n\
UT.EMAIL_ID \n\
ORDER BY :VALUE :SORT \n\
LIMIT :ROWS OFFSET :PAGE
get.requested.client.user.count.sql=SELECT count(1) FROM \n\
(SELECT \n\
TUT.ID AS ID, \n\
FALSE AS REGISTERED, \n\
TUT.NAME , \n\
TUT.EMAIL_ID \n\
FROM \n\
KYC_DB.TEMP_KYC_DOCUMENTS TKD, \n\
TEMP_USER_TBL TUT \n\
WHERE \n\
TKD.requestee_userid = TUT.ID \n\
AND TKD.COMPANY_ID = :companyId \n\
GROUP BY \n\
TUT.EMAIL_ID \n\
UNION \n\
SELECT \n\
REQUESTEE_USERID AS ID, \n\
TRUE AS REGISTERED, \n\
REQUESTEE_USERNAME AS NAME, \n\
CERTUS_CORE_DB.GETUSERNAMEBYID(REQUESTEE_USERID) AS EMAIL_ID \n\
FROM \n\
KYC_DB.KYC_DOCUMENT_DETAILS_VIEW KDDV \n\
WHERE \n\
KDDV.COMPANY_ID = :companyId \n\
GROUP BY \n\
EMAIL_ID  ) AS UT \n\
{0}
update.kyc.user.registereduser.sql=update \n\
kyc_db.kyc_status_details_tbl kd \n\
set \n\
kd.unregistered_user = :unregisteredUser , \n\
kd.user_id=:userId \n\
where \n\
kd.user_id = :tempUserId
client.dashboard.user.count.summary=select  \n\
SUM(CASE WHEN unregistered is FALSE THEN 1 ELSE 0 END) AS registered_count, \n\
SUM(CASE WHEN ipv_completed is TRUE THEN 1 ELSE 0 END) AS ipv_completed_count, \n\
SUM(CASE WHEN unregistered IS TRUE THEN 1 ELSE 0 END) AS unregistered_count \n\
from \n\
(select ut.id, ut.email_id, ut.ipv_completed, false as unregistered \n\
from certus_core_db.user_tbl ut, \n\
certus_core_db.authorities a, \n\
certus_core_db.company_profile cp, \n\
kyc_db.kyc_documents kd  \n\
where \n\
cp.id = kd.company_id  \n\
and kd.requestee_userid = ut.id  \n\
and ut.email_id = a.username  \n\
and cp.id = :companyId \n\
and a.authority = 'ROLE_USER' \n\
group by email_id \n\
union \n\
select tut.id, tut.email_id, false as ipv_completed, true as unregistered \n\
from certus_core_db.temp_user_tbl tut, \n\
kyc_db.temp_kyc_documents tkd, \n\
certus_core_db.company_profile cp  \n\
where \n\
tut.id = tkd.requestee_userid  \n\
and cp.id = tkd.company_id  \n\
and cp.id = :companyId \n\
group by email_id) as dt
admin.dashboard.user.count.summary=select * from ( \n\
select COUNT(1) as registered from user_tbl ut ) as r, (select COUNT(1) as unregistered  from temp_user_tbl tut) as un, \n\
(select SUM(CASE WHEN verification_status ='In-Progress' THEN 1 ELSE 0 END) AS ipv_in_progress_count from  digital_ipv) as d1, \n\
(select SUM(CASE WHEN verification_status = 'Accepted' THEN 1 ELSE 0 END) AS ipv_accepted_count from  digital_ipv) as d2,\n\
(select SUM(CASE WHEN verification_status = 'Rejected' THEN 1 ELSE 0 END) AS ipv_rejected_count from  digital_ipv) as d3,\n\
(select SUM(CASE WHEN verification_status = 'Pending' THEN 1 ELSE 0 END) AS ipv_pending_count from  digital_ipv) as d4
